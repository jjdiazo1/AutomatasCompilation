// DO NOT EDIT THIS FILE! IT IS AUTOMATICALLY GENERATED FROM FILE "src/DeCoder.gold"
import gold.*;
import gold.structures.*;
import gold.structures.automaton.*;
import gold.structures.bag.*;
import gold.structures.collection.*;
import gold.structures.deque.*;
import gold.structures.disjointset.*;
import gold.structures.graph.*;
import gold.structures.heap.*;
import gold.structures.list.*;
import gold.structures.map.*;
import gold.structures.multimap.*;
import gold.structures.point.*;
import gold.structures.queue.*;
import gold.structures.set.*;
import gold.structures.stack.*;
import gold.structures.tree.*;
import gold.structures.tree.binary.*;
import gold.structures.tree.nary.*;
import gold.structures.tuple.*;
import gold.structures.turingMachine.*;
import gold.swing.*;
import gold.swing.icon.*;
import gold.swing.icon.ajaxload.*;
import gold.swing.icon.famfamfam.*;
import gold.swing.icon.gold.*;
import gold.swing.icon.jlfgr.*;
import gold.swing.icon.wikimedia.*;
import gold.swing.icon.windows.*;
import gold.swing.look.*;
import gold.swing.util.*;
import gold.test.*;
import gold.test.automaton.*;
import gold.test.general.*;
import gold.test.graph.*;
import gold.util.*;
import gold.visualization.*;
import gold.visualization.automaton.*;
import gold.visualization.graph.*;
import gold.visualization.quadtree.*;
import gold.visualization.turingMachine.*;
import gold.visualization.util.*;
import java.lang.*;
import org.apfloat.*;
import static gold.util.GReflection.*;
@SuppressWarnings("all")
public final class DeCoder {
  static {
    gold.swing.util.GUtilities.installGoldLookAndFeel();
  }
  public static Object Alph=null;
  public static void main(String[] args) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=9;
      Object decoder=$fix(DeCoder.createTransducer(Alph));
      $line=10;
      System.out.println($message(new Object[]{"Input strings of (0..7)"}));
      $line=13;
      Utilities.test($cast(gold.structures.automaton.IAutomaton.class,decoder));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,DeCoder.class,"main",$line);
    }
  }
  public static ITransducer createTransducer(Object A) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=17;
      Object Q=$fix($opUnionY(GCollections.asSet(0,1,2,3,4,5,6,7,""),GCollections.asSet("error")));
      $line=18;
      System.out.println($message(new Object[]{Q}));
      $line=19;
      Object \u03A3=$fix($opIntvlY('0','7'));
      $line=20;
      Object O=$fix($opIntvlY('a','c'));
      $line=21;
      Object q_0=$fix("");
      $line=22;
      Object F=$fix($opDiffeY(Q,GCollections.asSet("error")));
      $line=23;
      $result=$invokeConstructor(GDeterministicTransducer.class,new Object[]{Q,\u03A3,O,q_0,F,new GMethod(DeCoder.class,"\u03B4"),new GMethod(DeCoder.class,"g"),new GMethod(DeCoder.class,"h")});
      if (true) break $try;
      $line=24;
      $rethrow(new RuntimeException("The function \"createTransducer(A:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,DeCoder.class,"createTransducer",$line);
    }
    return $cast(ITransducer.class,$result);
  }
  public static Object h(Object x, Object s) {
    int $line=0;
    Object $result=null;
    $try:try {
      $result=DeCoder.binary(x,s);
      if (true) break $try;
      $line=26;
      $rethrow(new RuntimeException("The function \"h(x:Object,s:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,DeCoder.class,"h",$line);
    }
    return $result;
  }
  public static Object g(Object x) {
    int $line=0;
    Object $result=null;
    $try:try {
      $result="";
      if (true) break $try;
      $line=28;
      $rethrow(new RuntimeException("The function \"g(x:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,DeCoder.class,"g",$line);
    }
    return $result;
  }
  public static Object \u03B4(Object q, Object \u03C3) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=32;
      if (($opEqualY(q,"")&&$opMembrY(\u03C3,$opIntvlY('1','7')))) {
        $line=32;
        $result="error";
        if (true) break $try;
      }
      $line=35;
      if (($opEqualY(q,"error")&&$opMembrY(\u03C3,$opIntvlY('0','7')))) {
        $line=35;
        $result="error";
        if (true) break $try;
      }
      $line=40;
      if (($opEqualY(q,3)&&$opEqualY(\u03C3,'4'))) {
        $line=40;
        $result="error";
        if (true) break $try;
      }
      $line=43;
      if (($opEqualY(q,4)&&$opEqualY(\u03C3,'3'))) {
        $line=43;
        $result="error";
        if (true) break $try;
      }
      $line=46;
      if (($opEqualY(q,5)&&$opEqualY(\u03C3,'6'))) {
        $line=46;
        $result="error";
        if (true) break $try;
      }
      $line=49;
      if (($opEqualY(q,6)&&$opEqualY(\u03C3,'5'))) {
        $line=49;
        $result="error";
        if (true) break $try;
      }
      $line=52;
      $result=Integer.parseInt($cast(java.lang.String.class,\u03C3));
      if (true) break $try;
      $line=53;
      $rethrow(new RuntimeException("The function \"\u03B4(q:Object,\u03C3:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,DeCoder.class,"\u03B4",$line);
    }
    return $result;
  }
  public static Object binary(Object x, Object s) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=57;
      if ($opEqualY(x,"")) {
        $line=57;
        $result="";
        if (true) break $try;
      }
      $line=60;
      if (($opEqualY(x,"error")&&$opMembrY(s,$opIntvlY('0','7')))) {
        $line=60;
        $result="";
        if (true) break $try;
      }
      $line=63;
      Object number=$fix($opSubtrY(x,Integer.parseInt($cast(java.lang.String.class,s))));
      $line=64;
      Object n=$fix(DeCoder.absolute(number));
      $line=66;
      System.out.println($message(new Object[]{n}));
      $line=68;
      if ($opEqualY(n,4)) {
        $line=68;
        $result="a";
        if (true) break $try;
      }
      else {
        $line=70;
        if ($opEqualY(n,2)) {
          $line=70;
          $result="b";
          if (true) break $try;
        }
        else {
          $line=72;
          if ($opEqualY(n,1)) {
            $line=72;
            $result="c";
            if (true) break $try;
          }
          else {
            $line=73;
            $result="";
            if (true) break $try;
          }
        }
      }
      $line=75;
      $rethrow(new RuntimeException("The function \"binary(x:Object,s:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,DeCoder.class,"binary",$line);
    }
    return $result;
  }
  public static Object absolute(Object number) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=78;
      Object numberAbs=$fix($opMultpY(number,$opMinusY(1)));
      $line=79;
      if ($opLesstY(number,0)) {
        $line=79;
        $result=numberAbs;
        if (true) break $try;
      }
      else {
        $line=81;
        $result=number;
        if (true) break $try;
      }
      $line=83;
      $rethrow(new RuntimeException("The function \"absolute(number:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,DeCoder.class,"absolute",$line);
    }
    return $result;
  }
}
