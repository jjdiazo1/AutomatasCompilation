using gold.structures.automaton.*
using gold.visualization.automaton.*

// Este autómata acepta cadenas sobre el alfabeto {a, c, h, t} 
// donde la secuencia "cat" aparece un número par de veces. 
// Las demás letras (a, h, t) pueden aparecer en cualquier cantidad, 
// y la aparición de "cat" debe ser en una cantidad par para que la cadena sea aceptada.
// Ejemplos de cadenas aceptadas: "catcatca", "haha"
// Ejemplos de cadenas rechazadas: "hatchthatcat", "thacatthatcatchthacatc"

// Autómata que reconoce cadenas ω ∈ (a|c|h|t)∗ en las que "cat" aparece un número par de veces.

procedure main(args:String[]) begin
    GAutomataFrame.show(createAutomaton())
    Utilities.test(createAutomaton())
end

function createAutomaton():IAutomaton begin
    // Definición de estados
    Q:={"even", "odd", "c_state", "ca_state", "c_state_odd", "ca_state_odd"}
    
    // Definición de alfabeto
    Σ:={'a', 'c', 'h', 't'}
    
    // Estado inicial
    q₀:="even"  // Comenzamos en "even", es decir, 0 apariciones de "cat" (par)
    
    // Definición de estados finales
    F:={"even", "c_state", "ca_state"}  // Aceptamos si la cantidad de "cat" es par
    
    // Función de transiciones
    δ:=⟦⟦"even", 'c', "c_state"⟧,
        ⟦"even", 'a', "even"⟧,
        ⟦"even", 'h', "even"⟧,
        ⟦"even", 't', "even"⟧,
        
        ⟦"odd", 'c', "c_state_odd"⟧,
        ⟦"odd", 'a', "odd"⟧,
        ⟦"odd", 'h', "odd"⟧,
        ⟦"odd", 't', "odd"⟧,
        
        ⟦"c_state_odd", 'c', "c_state_odd"⟧,
        ⟦"c_state_odd", 'a', "ca_state_odd"⟧,
        ⟦"c_state_odd", 'h', "odd"⟧,  // Resetea si no completa "cat"
        ⟦"c_state_odd", 't', "odd"⟧,  // Resetea si no completa "cat"
        
        ⟦"c_state_odd", 'a', "ca_state_odd"⟧,
	     ⟦"ca_state_odd", 'c', "c_state_odd"⟧,
	     ⟦"ca_state_odd", 'a', "odd"⟧,
	     ⟦"ca_state_odd", 'h', "odd"⟧,
	     ⟦"ca_state_odd", 't', "even"⟧, 
        
        ⟦"c_state", 'c', "c_state"⟧,
        ⟦"c_state", 'a', "ca_state"⟧,
        ⟦"c_state", 'h', "even"⟧,  // Resetea si no completa "cat"
        ⟦"c_state", 't', "even"⟧,  // Resetea si no completa "cat"
        
        ⟦"ca_state", 'c', "c_state"⟧,
        ⟦"ca_state", 'a', "even"⟧, // Resetea si no completa "cat"
        ⟦"ca_state", 'h', "even"⟧, // Resetea si no completa "cat"
        ⟦"ca_state", 't', "odd"⟧,  // Completa "cat" y cambia a "odd"
        
        ⟦"even", 't', "even"⟧,
        ⟦"odd", 't', "odd"⟧,
        ⟦"even", 'a', "even"⟧,
        ⟦"odd", 'a', "odd"⟧,
        ⟦"c_state", 'a', "ca_state"⟧⟧
    
    // Creación del autómata determinístico
    return GDeterministicAutomaton(Q,Σ,q₀,F,δ)
end

// Ejemplos de cadenas aceptadas:
// "catcatca": La secuencia "cat" aparece dos veces (par).
// "haha": No hay ninguna aparición de "cat", lo que es considerado par (0 es par).

// Ejemplos de cadenas rechazadas:
// "hatchthatcat": "cat" aparece una vez (impar).
// "thacatthatcatchthacatc": "cat" aparece tres veces (impar).
