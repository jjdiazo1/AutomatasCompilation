using gold.structures.automaton.*
using gold.visualization.automaton.*


// Autómata que reconoce cadenas ω ∈ (0|1|2|...9| > | < | =)∗ de la forma d0 bop d1 bop ... bop dn

procedure main(args:String[]) begin
    GAutomataFrame.show(createAutomaton())
    Utilities.test(createAutomaton())
end

function createAutomaton():IAutomaton begin
⧐	 Q := ((0‥9) × {'>', '<', '='}) ∪ (({⟨(0‥9)×(0‥9)⟩})) ∪ (0‥9) ∪ {"error"} Lo tenia asi pero me sacaba error y me toco expandir todos los estados manualmente, por favor arreglen gold.
    Q := ((0‥9) × {'>', '<', '='}) ∪ ({⟨0,0⟩, ⟨0,1⟩, ⟨0,2⟩, ⟨0,3⟩, ⟨0,4⟩, ⟨0,5⟩, ⟨0,6⟩, ⟨0,7⟩, ⟨0,8⟩, ⟨0,9⟩,
 ⟨1,0⟩, ⟨1,1⟩, ⟨1,2⟩, ⟨1,3⟩, ⟨1,4⟩, ⟨1,5⟩, ⟨1,6⟩, ⟨1,7⟩, ⟨1,8⟩, ⟨1,9⟩,
 ⟨2,0⟩, ⟨2,1⟩, ⟨2,2⟩, ⟨2,3⟩, ⟨2,4⟩, ⟨2,5⟩, ⟨2,6⟩, ⟨2,7⟩, ⟨2,8⟩, ⟨2,9⟩,
 ⟨3,0⟩, ⟨3,1⟩, ⟨3,2⟩, ⟨3,3⟩, ⟨3,4⟩, ⟨3,5⟩, ⟨3,6⟩, ⟨3,7⟩, ⟨3,8⟩, ⟨3,9⟩,
 ⟨4,0⟩, ⟨4,1⟩, ⟨4,2⟩, ⟨4,3⟩, ⟨4,4⟩, ⟨4,5⟩, ⟨4,6⟩, ⟨4,7⟩, ⟨4,8⟩, ⟨4,9⟩,
 ⟨5,0⟩, ⟨5,1⟩, ⟨5,2⟩, ⟨5,3⟩, ⟨5,4⟩, ⟨5,5⟩, ⟨5,6⟩, ⟨5,7⟩, ⟨5,8⟩, ⟨5,9⟩,
 ⟨6,0⟩, ⟨6,1⟩, ⟨6,2⟩, ⟨6,3⟩, ⟨6,4⟩, ⟨6,5⟩, ⟨6,6⟩, ⟨6,7⟩, ⟨6,8⟩, ⟨6,9⟩,
 ⟨7,0⟩, ⟨7,1⟩, ⟨7,2⟩, ⟨7,3⟩, ⟨7,4⟩, ⟨7,5⟩, ⟨7,6⟩, ⟨7,7⟩, ⟨7,8⟩, ⟨7,9⟩,
 ⟨8,0⟩, ⟨8,1⟩, ⟨8,2⟩, ⟨8,3⟩, ⟨8,4⟩, ⟨8,5⟩, ⟨8,6⟩, ⟨8,7⟩, ⟨8,8⟩, ⟨8,9⟩,
 ⟨9,0⟩, ⟨9,1⟩, ⟨9,2⟩, ⟨9,3⟩, ⟨9,4⟩, ⟨9,5⟩, ⟨9,6⟩, ⟨9,7⟩, ⟨9,8⟩, ⟨9,9⟩ }) ∪ (0‥9) ∪ {"error"}
    
    Σ:={'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '>', '<', '='}
    
    q₀:= ⟨0,0⟩
    
    F:= (0‥9)

    return GDeterministicAutomaton(Q,Σ,q₀,F,δ)
end

// CAMBIAR PARA ACEPTAR los individuales de 0‥9

function δ(q,s) begin  // error and final state
 if q = "error" then return "error"
 	 	
 elseif s in {'>', '<', '='} then
  	return ⟨q,s⟩
 else
 	return "error"
	end
end

function δ(⟨s1,s2⟩,symbol) begin
	
⧐	INICIO
	if symbol in {'>', '<', '='} and s1=0 and s2=0 then return "error"
 		// Rechaza cadenas BOP ‥.
 		 	
	elseif symbol in {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'} and s1=0 and s2=0 then return ⟨Integer.parseInt(symbol),0⟩
		// Continua si lee un numero al inicio NUM ‥.
		
	elseif symbol in {'>', '<', '='} and s2=0 then return ⟨s1, symbol⟩
		// Continua si lee un numero al inicio NUM BOP ‥.
		
	elseif symbol in {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'} and s2=0 then return "error"
		// Rechaza si lee un numero al inicio NUM NUM ‥.
	
	// Hasta aca yo tendre algo de la forma NUM BOP osea 1 >
	
⧐	RECHAZOS SYNTAX	
	elseif symbol in {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'} and s2 in {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'} then return "error"
		// Rechaza cadenas NUM NUM
	elseif symbol in {'>', '<', '='} and s2 in {'>', '<', '='} then return "error"
		// Rechaza cadenas BOP BOP
		
		
⧐	LOGICA
		
	elseif symbol in {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'} and s2 = '>' and s1 > Integer.parseInt(symbol) then return Integer.parseInt(symbol)
			
	elseif symbol in {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'} and s2 = '<' and s1 < Integer.parseInt(symbol) then return Integer.parseInt(symbol)
	
	elseif symbol in {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'} and s2 = '=' and s1 = Integer.parseInt(symbol) then return Integer.parseInt(symbol)

				
		
	else return "error"
end
end

